class Node {
    int data;
    Node next;

    public Node(int data) {
        this.data = data;
        this.next = null;
    }
}

class CircularLinkedList {
    private Node head;
    private Node tail;

    public CircularLinkedList() {
        head = null;
        tail = null;
    }

    // Add a node to the end of the circular linked list
    public void append(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            tail = newNode;
            newNode.next = head; // Pointing back to itself for circularity
        } else {
            tail.next = newNode;
            tail = newNode;
            newNode.next = head; // Pointing back to the head for circularity
        }
    }

    // Display the circular linked list
    public void display() {
        if (head == null) {
            System.out.println("Circular linked list is empty.");
            return;
        }

        Node current = head;
        do {
            System.out.print(current.data + " ");
            current = current.next;
        } while (current != head);
        System.out.println();
    }
}

public class CircularLinkedListExample {
    public static void main(String[] args) {
        CircularLinkedList cll = new CircularLinkedList();

        cll.append(1);
        cll.append(2);
        cll.append(3);
        cll.append(4);

        System.out.println("Circular Linked List:");
        cll.display(); // Output: 1 2 3 4

        // Adding more elements
        cll.append(5);
        cll.append(6);

        System.out.println("Updated Circular Linked List:");
        cll.display(); // Output: 1 2 3 4 5 6
    }
}
